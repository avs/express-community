/*
 */

/* ----------------------------------------------------------------------
 * modSemiSphere Module
 * ----------------------------------------------------------------------
 * Description:
 *   
 *   SemiSphere rotates a semi-spherical "solid" body of revolution.  The
 *   routine creates surfaces and the appropriate normals for the inside,
 *   outside, and end cap (if required).  The outside polyline line is
 *   required. The routine also calculates the mass properties for the
 *   body. The body is generated fo 360 degrees of revolution only.
 *
 * Authors: 
 *   Brian Selle, Leon Thrane, Advanced Visual Systems Inc.
 *   Documentation written by Ian Curington
 *
 * Revision: 10th February 2000 - Paul G. Lever, IAC
 *   Converted to IAC format.
 *
 * ----------------------------------------------------------------------
 * Note:
 *   The gen.h include file is generated by Express when the module is 
 *   compiled. It avoids including "user.h" or "express.h" directly, so 
 *   that the module may be moved across the processes by changing the V
 *   properties in the library.
 * ----------------------------------------------------------------------
 */

#include "xp_comm_proj/semisphr/gen.h"
#include "meshutils.h"
#include "XP_OM_CALL.h"
#include <math.h>

int
SemiSphere_modSemiSphere::update(OMevent_mask , int seq_num)
{
  int  status;         // Function return status 

  // Check for valid active status
  if( (int)active == 0 )
  {
    return( XP_SUCCESS );
  }

  // Define and setup the semi data structure   
  semi_data_t  data;
  data.body_type   = kSOLID;
  data.half_angle  = (float)half_angle * PI / 180.0;
  data.r_outside   = (float)r_outside;
  data.r_inside    = (float)r_inside;
  data.z_offset    = (float)z_offset;
  data.num_thetas  = (int)num_thetas;
  data.num_phis    = data.num_thetas * data.half_angle / (2 * PI);
  data.gen_end_cap = 1;

  // Check for valid data 
  if( data.half_angle <= 0 || data.half_angle > PI + ZERO_TOL )
  {
    printf( "modBodyOfRevolution: 0 < half_angle <= 180\n" );
    return( XP_FAILURE );
  }
  if( data.num_thetas < 2 )
  {
    printf( "modBodyOfRevolution: num_thetas must be >= 2\n" );
    return( XP_FAILURE );
  }
  if( data.num_phis < 2 )
  {
    data.num_phis = 4;
  }

  // Set body type
  if( data.r_inside > 0 )
  {
    if( r_inside > r_outside )
    {
      printf( "modBodyOfRevolution: r_inside > r_outside\n" );
      return( XP_FAILURE );
    } 
    data.body_type = kHOLLOW;
  }    

  // Initialize the field
  OMobj_id  field_id = (OMobj_id)out.obj_id();
  FUNCCALLR( "Error initializing field", MU_init_field( field_id ) ); 
  
  // Create the surfaces
  FUNCCALLR( "Create body of revolution",
	     MU_gen_semi_sphere( field_id, &data ) ); 
  
  // Calculate the mass properties
  mass_props_t mass_props;
  mass_props.density = (float)density;

  FUNCCALLR( "Calculate the mass properties",
	     MU_mass_props_semi_sphere( &data, &mass_props ) ); 
  
  // Set the mass properties in Express  
  mass = mass_props.mass;
  zcg  = mass_props.zcg;
  izz  = mass_props.izz;

  // Successful return
  return( XP_SUCCESS );
}

/* end of file */
